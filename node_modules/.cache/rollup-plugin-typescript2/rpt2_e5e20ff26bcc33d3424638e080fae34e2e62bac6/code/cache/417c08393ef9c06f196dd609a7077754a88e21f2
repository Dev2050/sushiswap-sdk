{"code":"import { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nimport { MaxUint256 } from '../constants';\r\nimport { Rounding } from '../enums';\r\nimport _Big from 'big.js';\r\nimport invariant from 'tiny-invariant';\r\nimport toFormat from 'toformat';\r\nconst Big = toFormat(_Big);\r\nexport class CurrencyAmount extends Fraction {\r\n    constructor(currency, numerator, denominator) {\r\n        super(numerator, denominator);\r\n        invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT');\r\n        this.currency = currency;\r\n        this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));\r\n    }\r\n    /**\r\n     * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n     * @param currency the currency in the amount\r\n     * @param rawAmount the raw token or ether amount\r\n     */\r\n    static fromRawAmount(currency, rawAmount) {\r\n        return new CurrencyAmount(currency, rawAmount);\r\n    }\r\n    /**\r\n     * Construct a currency amount with a denominator that is not equal to 1\r\n     * @param currency the currency\r\n     * @param numerator the numerator of the fractional token amount\r\n     * @param denominator the denominator of the fractional token amount\r\n     */\r\n    static fromFractionalAmount(currency, numerator, denominator) {\r\n        return new CurrencyAmount(currency, numerator, denominator);\r\n    }\r\n    add(other) {\r\n        invariant(this.currency.equals(other.currency), 'CURRENCY');\r\n        const added = super.add(other);\r\n        return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\r\n    }\r\n    subtract(other) {\r\n        invariant(this.currency.equals(other.currency), 'CURRENCY');\r\n        const subtracted = super.subtract(other);\r\n        return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\r\n    }\r\n    multiply(other) {\r\n        const multiplied = super.multiply(other);\r\n        return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\r\n    }\r\n    divide(other) {\r\n        const divided = super.divide(other);\r\n        return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\r\n    }\r\n    toSignificant(significantDigits = 6, format, rounding = Rounding.ROUND_DOWN) {\r\n        return super\r\n            .divide(this.decimalScale)\r\n            .toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = this.currency.decimals, format, rounding = Rounding.ROUND_DOWN) {\r\n        invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS');\r\n        return super\r\n            .divide(this.decimalScale)\r\n            .toFixed(decimalPlaces, format, rounding);\r\n    }\r\n    toExact(format = { groupSeparator: '' }) {\r\n        Big.DP = this.currency.decimals;\r\n        return new Big(this.quotient.toString())\r\n            .div(this.decimalScale.toString())\r\n            .toFormat(format);\r\n    }\r\n    get wrapped() {\r\n        if (this.currency.isToken)\r\n            return this;\r\n        return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\r\n    }\r\n}\r\n//# sourceMappingURL=CurrencyAmount.js.map","references":["/Users/fisseha/sushiswap-git/sushiswap-sdk/src/types/index.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/entities/Currency.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/entities/Fraction.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/node_modules/jsbi/jsbi.d.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/constants/index.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/enums/index.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/entities/Token.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/node_modules/@types/big.js/index.d.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/node_modules/toformat/toFormat.js"],"map":"{\"version\":3,\"file\":\"CurrencyAmount.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/CurrencyAmount.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/fisseha/sushiswap-git/sushiswap-sdk/entities/CurrencyAmount.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh } from '../types';\r\nimport { Currency } from './Currency';\r\nimport { Fraction } from './Fraction';\r\nimport JSBI from 'jsbi';\r\nimport { Rounding } from '../enums';\r\nimport { Token } from './Token';\r\nexport declare class CurrencyAmount<T extends Currency> extends Fraction {\r\n    readonly currency: T;\r\n    readonly decimalScale: JSBI;\r\n    /**\r\n     * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n     * @param currency the currency in the amount\r\n     * @param rawAmount the raw token or ether amount\r\n     */\r\n    static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T>;\r\n    /**\r\n     * Construct a currency amount with a denominator that is not equal to 1\r\n     * @param currency the currency\r\n     * @param numerator the numerator of the fractional token amount\r\n     * @param denominator the denominator of the fractional token amount\r\n     */\r\n    static fromFractionalAmount<T extends Currency>(currency: T, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount<T>;\r\n    protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh);\r\n    add(other: CurrencyAmount<T>): CurrencyAmount<T>;\r\n    subtract(other: CurrencyAmount<T>): CurrencyAmount<T>;\r\n    multiply(other: Fraction | BigintIsh): CurrencyAmount<T>;\r\n    divide(other: Fraction | BigintIsh): CurrencyAmount<T>;\r\n    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;\r\n    toExact(format?: object): string;\r\n    get wrapped(): CurrencyAmount<Token>;\r\n}\r\n"}}
