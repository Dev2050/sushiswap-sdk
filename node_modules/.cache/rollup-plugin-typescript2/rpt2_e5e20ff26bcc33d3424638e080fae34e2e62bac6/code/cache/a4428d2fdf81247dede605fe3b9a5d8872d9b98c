{"code":"import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997, } from '../constants';\r\nimport { InsufficientInputAmountError, InsufficientReservesError, } from '../errors';\r\nimport { CurrencyAmount } from './CurrencyAmount';\r\nimport JSBI from 'jsbi';\r\nimport { Price } from './Price';\r\nimport { Token } from './Token';\r\nimport { computePairAddress } from '../functions/computePairAddress';\r\nimport invariant from 'tiny-invariant';\r\nimport { sqrt } from '../functions/sqrt';\r\nexport class Pair {\r\n    constructor(currencyAmountA, tokenAmountB) {\r\n        const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n            ? [currencyAmountA, tokenAmountB]\r\n            : [tokenAmountB, currencyAmountA];\r\n        this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');\r\n        this.tokenAmounts = tokenAmounts;\r\n    }\r\n    static getAddress(tokenA, tokenB) {\r\n        return computePairAddress({\r\n            factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n            tokenA,\r\n            tokenB,\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the token is either token0 or token1\r\n     * @param token to check\r\n     */\r\n    involvesToken(token) {\r\n        return token.equals(this.token0) || token.equals(this.token1);\r\n    }\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n     */\r\n    get token0Price() {\r\n        const result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\r\n        return new Price(this.token0, this.token1, result.denominator, result.numerator);\r\n    }\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\r\n    get token1Price() {\r\n        const result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\r\n        return new Price(this.token1, this.token0, result.denominator, result.numerator);\r\n    }\r\n    /**\r\n     * Return the price of the given token in terms of the other token in the pair.\r\n     * @param token token to return price of\r\n     */\r\n    priceOf(token) {\r\n        invariant(this.involvesToken(token), 'TOKEN');\r\n        return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n    }\r\n    /**\r\n     * Returns the chain ID of the tokens in the pair.\r\n     */\r\n    get chainId() {\r\n        return this.token0.chainId;\r\n    }\r\n    get token0() {\r\n        return this.tokenAmounts[0].currency;\r\n    }\r\n    get token1() {\r\n        return this.tokenAmounts[1].currency;\r\n    }\r\n    get reserve0() {\r\n        return this.tokenAmounts[0];\r\n    }\r\n    get reserve1() {\r\n        return this.tokenAmounts[1];\r\n    }\r\n    reserveOf(token) {\r\n        invariant(this.involvesToken(token), 'TOKEN');\r\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1;\r\n    }\r\n    getOutputAmount(inputAmount) {\r\n        invariant(this.involvesToken(inputAmount.currency), 'TOKEN');\r\n        if (JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n            JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n            throw new InsufficientReservesError();\r\n        }\r\n        const inputReserve = this.reserveOf(inputAmount.currency);\r\n        const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\r\n        const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);\r\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);\r\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee);\r\n        const outputAmount = CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\r\n        if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n            throw new InsufficientInputAmountError();\r\n        }\r\n        return [\r\n            outputAmount,\r\n            new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)),\r\n        ];\r\n    }\r\n    getInputAmount(outputAmount) {\r\n        invariant(this.involvesToken(outputAmount.currency), 'TOKEN');\r\n        if (JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n            JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n            JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)) {\r\n            throw new InsufficientReservesError();\r\n        }\r\n        const outputReserve = this.reserveOf(outputAmount.currency);\r\n        const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\r\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000);\r\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997);\r\n        const inputAmount = CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\r\n        return [\r\n            inputAmount,\r\n            new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)),\r\n        ];\r\n    }\r\n    getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\r\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY');\r\n        const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n            ? [tokenAmountA, tokenAmountB]\r\n            : [tokenAmountB, tokenAmountA];\r\n        invariant(tokenAmounts[0].currency.equals(this.token0) &&\r\n            tokenAmounts[1].currency.equals(this.token1), 'TOKEN');\r\n        let liquidity;\r\n        if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n            liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY);\r\n        }\r\n        else {\r\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient);\r\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient);\r\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\r\n        }\r\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n            throw new InsufficientInputAmountError();\r\n        }\r\n        return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\r\n    }\r\n    getLiquidityValue(token, totalSupply, liquidity, feeOn = false, kLast) {\r\n        invariant(this.involvesToken(token), 'TOKEN');\r\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY');\r\n        invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY');\r\n        invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY');\r\n        let totalSupplyAdjusted;\r\n        if (!feeOn) {\r\n            totalSupplyAdjusted = totalSupply;\r\n        }\r\n        else {\r\n            invariant(!!kLast, 'K_LAST');\r\n            const kLastParsed = JSBI.BigInt(kLast);\r\n            if (!JSBI.equal(kLastParsed, ZERO)) {\r\n                const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient));\r\n                const rootKLast = sqrt(kLastParsed);\r\n                if (JSBI.greaterThan(rootK, rootKLast)) {\r\n                    const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast));\r\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\r\n                    const feeLiquidity = JSBI.divide(numerator, denominator);\r\n                    totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\r\n                }\r\n                else {\r\n                    totalSupplyAdjusted = totalSupply;\r\n                }\r\n            }\r\n            else {\r\n                totalSupplyAdjusted = totalSupply;\r\n            }\r\n        }\r\n        return CurrencyAmount.fromRawAmount(token, JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient));\r\n    }\r\n}\r\n//# sourceMappingURL=Pair.js.map","references":["/Users/fisseha/sushiswap-git/sushiswap-sdk/src/constants/index.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/errors.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/types/index.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/entities/CurrencyAmount.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/node_modules/jsbi/jsbi.d.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/entities/Price.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/entities/Token.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/functions/computePairAddress.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/fisseha/sushiswap-git/sushiswap-sdk/src/functions/sqrt.ts"],"map":"{\"version\":3,\"file\":\"Pair.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/Pair.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/fisseha/sushiswap-git/sushiswap-sdk/entities/Pair.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh } from '../types';\r\nimport { CurrencyAmount } from './CurrencyAmount';\r\nimport { Price } from './Price';\r\nimport { Token } from './Token';\r\nexport declare class Pair {\r\n    readonly liquidityToken: Token;\r\n    private readonly tokenAmounts;\r\n    static getAddress(tokenA: Token, tokenB: Token): string;\r\n    constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>);\r\n    /**\r\n     * Returns true if the token is either token0 or token1\r\n     * @param token to check\r\n     */\r\n    involvesToken(token: Token): boolean;\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n     */\r\n    get token0Price(): Price<Token, Token>;\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\r\n    get token1Price(): Price<Token, Token>;\r\n    /**\r\n     * Return the price of the given token in terms of the other token in the pair.\r\n     * @param token token to return price of\r\n     */\r\n    priceOf(token: Token): Price<Token, Token>;\r\n    /**\r\n     * Returns the chain ID of the tokens in the pair.\r\n     */\r\n    get chainId(): number;\r\n    get token0(): Token;\r\n    get token1(): Token;\r\n    get reserve0(): CurrencyAmount<Token>;\r\n    get reserve1(): CurrencyAmount<Token>;\r\n    reserveOf(token: Token): CurrencyAmount<Token>;\r\n    getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair];\r\n    getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair];\r\n    getLiquidityMinted(totalSupply: CurrencyAmount<Token>, tokenAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>): CurrencyAmount<Token>;\r\n    getLiquidityValue(token: Token, totalSupply: CurrencyAmount<Token>, liquidity: CurrencyAmount<Token>, feeOn?: boolean, kLast?: BigintIsh): CurrencyAmount<Token>;\r\n}\r\n"}}
